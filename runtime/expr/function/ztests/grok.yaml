script: |
  zq -z 'grok(pattern, field)' simple.zson
  echo "// ==="
  echo '"0-1-2"' | zq -z -I patterns.zed -
  echo "// ==="
  # Ignores type annotation.
  echo '"0"' | zq -z 'grok("%{INT:int:int64}", this)' -
  echo "// ==="
  # Check to see that duplicate fields are squashed. This is not great but
  # this is what grokconstructor.appspot.com does.
  zq -z 'grok("%{INT:one} %{INT:one}", "1 2")'
  echo "// ==="
  echo '"string value"' | zq -z 'grok("%{INT:int}", this)' -

inputs:
  - name: simple.zson
    data: |
      {
        field: "2020-09-16T04:20:42.45+01:00 DEBUG This is a sample debug log message",
        pattern: "%{TIMESTAMP_ISO8601:event_time} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}"
      }
  - name: patterns.zed
    data: |
      const pattern = "ONE \\d\n" + "TWO %{ONE:one}-%{ONE:two}"
      yield grok("%{ONE:zero}-%{TWO:three}", this, pattern)

outputs:
  - name: stdout
    data: |
      {event_time:"2020-09-16T04:20:42.45+01:00",log_level:"DEBUG",log_message:"This is a sample debug log message"}
      // ===
      {zero:"0",three:"1-2",one:"1",two:"2"}
      // ===
      {int:"0"}
      // ===
      {one:"2"}
      // ===
      error({message:"grok(): value does not match pattern",on:"string value"})
